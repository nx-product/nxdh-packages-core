<?xml version='1.0' encoding="UTF-8" ?>
<HEAD>
<PACKAGE>DHRD-104821_OPTIONAL_FED_TENANT_POLICY_EXAMPLE</PACKAGE>
<NAME>DHRD-104821_OPTIONAL_FED_TENANT_POLICY_EXAMPLE</NAME>
<BUILD_DATE>20250422</BUILD_DATE>
<LEVEL>OPTIONAL</LEVEL>
<RELEASE>7.3.0.0-SNAPSHOT</RELEASE>
<CREATOR>hamid.ameziani</CREATOR>
</HEAD>

<BODY>
<!--   Package created by Hamid Ameziani -->
<!--      creation date: 04/22/2025 11:16:18 -->
<!--      creation version: null -->
<!--      source environment: //nxdh-monitoring-console:8100/SmartServer -->

<!--MxUserPwdPolicy 2516 v3 -->
<RESULT MODE="XML" ACTION="GETOBJECTS"  VERSION="2"  CHARSET="UTF8" >
<SMARTUSER_PWD_POLICY FIND="CODE='FED_TENANT_POL_EXMPL'" USER="l-e.issler" UPDATE_DATE="22/04/2025" UPDATE_TIME="11:11:33" LABEL='Fed. Tenant Example'>
<T_SMARTUSER_PWD_POLICY CODEFIELDS="CODE" >
<R_SMARTUSER_PWD_POLICY CODE=",[&quot;CODE&quot;,&quot;FED_TENANT_POL_EXMPL&quot;,]"  LOCAL_ID="2516" >
<ALERT_START ></ALERT_START>
<ATTEMPTS_MAX ></ATTEMPTS_MAX>
<CODE ><![CDATA[FED_TENANT_POL_EXMPL]]></CODE>
<DESCRIPTION ></DESCRIPTION>
<ENCODE_TYPE ></ENCODE_TYPE>
<FORBID_PWD_CHANGE >N</FORBID_PWD_CHANGE>
<GEN_PASSWORD_SCRIPT ></GEN_PASSWORD_SCRIPT>
<LOCK_OUT_DURATION ></LOCK_OUT_DURATION>
<LOGIN_MANAGER ><![CDATA[com.smartplanet.api.auth.OAuthLoginManager]]></LOGIN_MANAGER>
<LOGIN_MANAGER_RULE ><![CDATA[msgtrace("**************** Start OAuthLoginManager rule *********************************");

msgtrace("name: " + name);
msgtrace("family_name: " + family_name);
msgtrace("given_name: " + given_name);
msgtrace("email: " + email);
msgtrace("dh_roles:" + dh_roles);

tosave := 0;

// retrieve environment parameter
env := getEnvironmentCode();
msgtrace("env:" + env);
if (env = "") {
  msgerror("environment is not defined - did you start the server with -env?")
  return "KO";
}

// retrieve tenant parameter
tenant := getTenantCode();
msgtrace("tenant:" + tenant);
if (tenant = "") {
  msgerror("tenant code is not defined")
  return "KO";
}

// retrieve Datahub user by email
if (email = "") {
  msgerror("email claim is absent")
  return "KO";
}
users := getObjects("MxUser", "EMAIL_ADDRESS='" + email + "'");

// create user if not found in Datahub
if (arraysize(users) = 0) {
  user := createObject("MxUser");
  msgtrace("user created");
  user.EMAIL_ADDRESS := email;
  user.NAME := email;
  user.LASTNAME := family_name;
  user.FIRSTNAME := given_name;
  user.SMARTCODE := email;
  user.PRIVACY_LEVEL := "SMARTCO";
  user.LANGUAGE := "0";
  user.USER_CATEGORY := "USER";
  user.create("SMARTUSER_AUTHENTIFICATION");
  user.AUTH_PWD_POLICY := 'KEYCLOAK_POC_POLICY'; // Update with SSO policy code
  yes := getListItemId("YES_NO", "Y");
  user.ACTIVE := yes;
  tosave := 1;
} else {
  user := users[0];
}
msgtrace("user:" + user);

// assign correct user model (role)
if (dh_roles = "") {
  msgerror("dh_roles claim is absent")
  return "KO";
}
prefix := tenant + "." + env + "."
for (i := 0; i < arraysize(dh_roles) and user_role = ""; i := i +1) {
  dh_role := dh_roles[i];
  if (startswith(dh_role, prefix)) {
    user_role := substr(dh_role, strlen(prefix), strlen(dh_role));
  }
}

if (user_role = "") {
  msgtrace("No role found in dh_roles claim matching current environment");
  return "KO";
}

usermodels := getObjects("MxUser", "NAME='"+user_role+"'");
if (arraysize(usermodels) = 0) {
  msgerror("No user model found for " + user_role);
  return "KO";
}
usermodel := usermodels[0];

if (user.USER_MODEL != usermodel.id()) {
  user.USER_MODEL := usermodel.id();
  user := USER_MAP_MODEL(user, usermodel.id());
  tosave := 1;
}

msgtrace("**************** End of OAuthLoginManager rule *********************************");
if (tosave = 0) {
    return user;
}

savedUsers := saveObjectsImmediately(user);
return savedUsers[0];]]></LOGIN_MANAGER_RULE>
<NAME ><![CDATA[Fed. Tenant Example]]></NAME>
<PREVIOUS_PASSWORDS_MAX ></PREVIOUS_PASSWORDS_MAX>
<SERVER_CONTROL ></SERVER_CONTROL>
<SSO_AUTHENTICATION_MODE >RECOGNIZED_NT_USER_ABLE_CHANGE_LOGIN</SSO_AUTHENTICATION_MODE>
<TEMPORARY_MAX_CONNECTIONS ></TEMPORARY_MAX_CONNECTIONS>
<VALIDITY_DURATION >-1</VALIDITY_DURATION>
<VERIFICATION_SCRIPT ></VERIFICATION_SCRIPT>
</R_SMARTUSER_PWD_POLICY>
</T_SMARTUSER_PWD_POLICY>
<T_SMARTUSER_PWD_POLICY_LDAP CODEFIELDS="" >
<R_SMARTUSER_PWD_POLICY_LDAP ID=",[&quot;&quot;,&quot;UNIQUE_RECORD&quot;,]"  LOCAL_ID="2012" >
<LDAP_ATTRIBUTES ></LDAP_ATTRIBUTES>
<LDAP_BASEDN ></LDAP_BASEDN>
<LDAP_CLIENT_CONTROL ></LDAP_CLIENT_CONTROL>
<LDAP_HOST ></LDAP_HOST>
<LDAP_LOOKUP_KEY ></LDAP_LOOKUP_KEY>
<LDAP_LOOKUP_VALUE ></LDAP_LOOKUP_VALUE>
<LDAP_OBJECTDN ></LDAP_OBJECTDN>
<LDAP_OPERATIONAL_ATTRIBUTES ></LDAP_OPERATIONAL_ATTRIBUTES>
<LDAP_PORT ></LDAP_PORT>
<LDAP_PROXYUSER_LOGIN ></LDAP_PROXYUSER_LOGIN>
<LDAP_PROXYUSER_PWD ></LDAP_PROXYUSER_PWD>
<LDAP_SSL_KEY_STORE_PASSWORD ></LDAP_SSL_KEY_STORE_PASSWORD>
<LDAP_SSL_KEY_STORE_PATH ></LDAP_SSL_KEY_STORE_PATH>
<LDAP_SSL_TRUST_STORE_PASSWORD ></LDAP_SSL_TRUST_STORE_PASSWORD>
<LDAP_SSL_TRUST_STORE_PATH ></LDAP_SSL_TRUST_STORE_PATH>
<LDAP_USERPN ></LDAP_USERPN>
<LDAP_USE_SSL ></LDAP_USE_SSL>
</R_SMARTUSER_PWD_POLICY_LDAP>
</T_SMARTUSER_PWD_POLICY_LDAP>
<T_SMARTUSER_PWD_POLICY_OAUTH CODEFIELDS="" >
<R_SMARTUSER_PWD_POLICY_OAUTH ID=",[&quot;&quot;,&quot;UNIQUE_RECORD&quot;,]"  LOCAL_ID="1511" >
<OAUTH_ACCESS_TOKEN_URL ></OAUTH_ACCESS_TOKEN_URL>
<OAUTH_AUTHENTICATION_URL ></OAUTH_AUTHENTICATION_URL>
<OAUTH_AUTHORIZATION_URL ></OAUTH_AUTHORIZATION_URL>
<OAUTH_CLIENT_ID ><![CDATA[datahub]]></OAUTH_CLIENT_ID>
<OAUTH_CLIENT_SECRET ></OAUTH_CLIENT_SECRET>
<OAUTH_GRANT_TYPE ></OAUTH_GRANT_TYPE>
<OAUTH_LOGIN_TAG ></OAUTH_LOGIN_TAG>
<OAUTH_LOGOUT_URL ></OAUTH_LOGOUT_URL>
<OAUTH_MODE ></OAUTH_MODE>
<OAUTH_REDIRECT_PORT ></OAUTH_REDIRECT_PORT>
<OAUTH_RESPONSE_TYPE ></OAUTH_RESPONSE_TYPE>
<OAUTH_SCOPE ><![CDATA[openid]]></OAUTH_SCOPE>
</R_SMARTUSER_PWD_POLICY_OAUTH>
</T_SMARTUSER_PWD_POLICY_OAUTH>
<T_SMARTUSER_PWD_POLICY_SAML>
</T_SMARTUSER_PWD_POLICY_SAML>

</SMARTUSER_PWD_POLICY>
</RESULT>

</BODY>
